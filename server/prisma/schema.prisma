// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Session Management
model Session {
  id          String   @id
  sid         String   @unique
  data        String
  expiresAt   DateTime @map("expires_at")

  @@map("session")
}

// User Management
model User {
  id            Int        @id @default(autoincrement())
  roleId        Int
  universityId  String     @db.VarChar(16)
  username      String     @unique
  loginEmail    String     @unique
  loginPassword String
  firstName     String
  lastName      String
  displayName   String
  jobTitle      String?
  office        String?
  bio           String?
  dateJoined    DateTime   @default(now())
  lastViewed    String?
  lastViewedLabId Int?
  profilePic    String? 
  // Relationships
  role          Role       @relation(fields: [roleId], references: [id])
  lastViewedLab Lab?       @relation("LastViewedLab", fields: [lastViewedLabId], references: [id])
  labMembers    LabMember[]
  LabAdmission LabAdmission[]
  contacts      Contact[]
  auditLogs     AuditLog[]
  inventoryLogs InventoryLog[]
  notifications Notification[]
  @@map("user")
}

model Role {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  permissionLevel Int

  // Relationships
  users           User[]

  @@map("role")
}

model Contact {
  id             Int          @id @default(autoincrement())
  userId         Int
  type           String
  info           String
  useCase        String?
  name           String

  // Relationships
  user           User         @relation(fields: [userId], references: [id])
  memberStatuses MemberStatus[]

  @@map("contact")
}

// Status Management
model Status {
  id           Int            @id @default(autoincrement())
  statusName   String         @unique
  statusWeight Int

  // Relationships
  memberStatuses MemberStatus[]

  @@map("status")
}

// Lab Management
model Lab {
  id             Int                @id @default(autoincrement())
  name           String
  location       String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  status         String
  labPic         String?

  // Relationships
  usersLastViewed User[]     @relation("LastViewedLab")
  LabAdmission LabAdmission[]
  labMembers     LabMember[]
  inventoryItems LabInventoryItem[]
  discussions    Discussion[]
  events         Event[]
  auditLogs      AuditLog[]
  @@map("lab")
  
}

model LabRole {
  id              Int         @id @default(autoincrement())
  name            String
  description     String?
  permissionLevel Int

  // Relationships
  labMembers      LabMember[]
  LabAdmission LabAdmission[]

  @@map("lab_role")
}



enum AdmissionStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

// Updated model using the enum
model LabAdmission { 
  id              Int              @id @default(autoincrement())
  labId           Int
  userId          Int
  roleId          Int
  status          AdmissionStatus  @default(PENDING)
  isPCI           Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relationships
  lab             Lab              @relation(fields: [labId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  role            LabRole          @relation(fields: [roleId], references: [id])
  @@map("lab_admission")
}


model LabMember {
  id                      Int                      @id @default(autoincrement())
  userId                  Int               
  labId                   Int
  labRoleId               Int
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  inductionDone           Boolean                  @default(false)
  isPCI                   Boolean                  @default(false)

  // Relationships
  user                    User                     @relation(fields: [userId], references: [id])
  lab                     Lab                      @relation(fields: [labId], references: [id])
  labRole                 LabRole                  @relation(fields: [labRoleId], references: [id])
  memberStatus            MemberStatus[]
  discussionPosts         DiscussionPost[]
  discussionReplies       DiscussionReply[]
  discussionPostReactions DiscussionPostReaction[]
  discussionReplyReactions DiscussionReplyReaction[]
  events                  Event[]
  eventAssignments        EventAssignment[]
  labAttendance           LabAttendance[]
  inventoryLogs           InventoryLog[]

  @@map("lab_member")
}

model MemberStatus {
  id          Int      @id @default(autoincrement())
  contactId   Int
  memberId    Int
  statusId    Int
  isActive    Boolean  @default(true)
  description String?  @db.Text

  // Relationships
  contact     Contact  @relation(fields: [contactId], references: [id])
  labMember   LabMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  status      Status   @relation(fields: [statusId], references: [id])

  @@map("member_status")
}

// Inventory Management
model Item {
  id             Int                  @id @default(autoincrement())
  name           String
  description    String?
  safetyInfo     String?
  approval       Boolean              @default(false)

  // Relationships
  labInventory   LabInventoryItem[]

  @@map("item")
}

model LabInventoryItem {
  id              Int          @id @default(autoincrement())
  itemId          Int
  labId           Int
  location        String
  itemUnit        String
  currentStock    Int
  minStock        Int
  updatedAt       DateTime     @updatedAt
  itemPic       String?

  // Relationships
  item            Item         @relation(fields: [itemId], references: [id])
  lab             Lab          @relation(fields: [labId], references: [id])
  labItemTags     LabItemTag[]
  inventoryLogs   InventoryLog[]

  @@map("lab_inventory_item")
}

model ItemTag {
  id             Int          @id @default(autoincrement())
  name           String
  tagDescription String?

  // Relationships
  labItemTags    LabItemTag[]

  @@map("item_tag")
}

model LabItemTag {
  id              Int              @id @default(autoincrement())
  itemTagId       Int
  inventoryItemId Int

  // Relationships
  itemTag         ItemTag          @relation(fields: [itemTagId], references: [id], onDelete: Cascade)
  inventoryItem   LabInventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  @@map("lab_item_tag")
}



enum DiscussionCategoryState {
  OPEN
  HIDDEN
}

enum DiscussionPostReplyState {
  REPLIES_OPEN      // Visible to all, open to replies
  REPLIES_CLOSED    // Visible to all, replies closed
}

enum DiscussionPostState {
  DEFAULT
  HIDDEN            // Visible to lab managers+, open to replies to those who can see
  STICKY            // Stuck to top of category
}

// Discussion Board
model Discussion {
  id                    Int              @id @default(autoincrement())
  labId                 Int
  name                  String
  description           String?
  
  visiblePermission     Int?   // Permission to be able to see the category at all
  postPermission        Int?   // Permission to be able to post within the category

  // Relationships
  lab         Lab                        @relation(fields: [labId], references: [id])
  posts       DiscussionPost[]

  @@map("discussion")
}

model DiscussionPost {
  id                      Int                      @id @default(autoincrement())
  discussionId            Int
  memberId                Int
  title                   String
  content                 String                   @db.Text
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  isPinned                Boolean                  @default(false)
  isAnnounce              Boolean                  @default(false)

  replyState              DiscussionPostReplyState      @default(REPLIES_OPEN)
  state                   DiscussionPostState           @default(DEFAULT)

  // Relationships
  discussion              Discussion               @relation(fields: [discussionId], references: [id])
  member                  LabMember                @relation(fields: [memberId], references: [id])
  replies                 DiscussionReply[]
  tags                    DiscussionPostTag[]
  reactions               DiscussionPostReaction[]

  @@map("discussion_post")
}

model DiscussionReply {
  id        Int       @id @default(autoincrement())
  postId    Int
  memberId  Int
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parentId  Int?

  // Relationships
  post      DiscussionPost     @relation(fields: [postId], references: [id], onDelete: Cascade)
  member    LabMember          @relation(fields: [memberId], references: [id])
  parent    DiscussionReply?  @relation("ReplyToReply", fields: [parentId], references: [id])
  children  DiscussionReply[] @relation("ReplyToReply")
  reactions DiscussionReplyReaction[]

  @@map("discussion_reply")
}

// Post Reaction System
model PostReaction {
  id            Int                      @id @default(autoincrement())
  reactionName  String                   @db.VarChar(64)
  reaction      String                   @db.VarChar(64)

  // Relationships
  postReactions DiscussionPostReaction[]

  @@map("post_reaction")
}

model DiscussionPostReaction {
  id         Int          @id @default(autoincrement())
  postId     Int
  memberId   Int
  reactionId Int

  // Relationships
  post       DiscussionPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  member     LabMember      @relation(fields: [memberId], references: [id])
  reaction   PostReaction   @relation(fields: [reactionId], references: [id], onDelete: Cascade)

  @@map("discussion_post_reaction")
}

// Reply Reaction
model ReplyReaction {
  id            Int         @id @default(autoincrement())
  reactionName  String      @db.VarChar(64)
  reaction      String      @db.VarChar(64)

  // Relationships
  replyReactions DiscussionReplyReaction[]

  @@map("reply_reaction")
}

model DiscussionReplyReaction {
  id          Int           @id @default(autoincrement())
  replyId     Int
  memberId    Int
  reactionId  Int

  // Relationships
  reply       DiscussionReply   @relation(fields: [replyId], references: [id], onDelete: Cascade)
  member      LabMember         @relation(fields: [memberId], references: [id])
  reaction    ReplyReaction     @relation(fields: [reactionId], references: [id], onDelete: Cascade)

  @@map("discussion_reply_reaction")
  @@unique([replyId, memberId, reactionId])
}

// Post Tag System
model PostTag {
  id          Int                 @id @default(autoincrement())
  tag         String
  description String?             @db.Text
  colour      String?             @db.Text

  // Relationships
  postTags    DiscussionPostTag[]

  @@map("post_tag")
}

model DiscussionPostTag {
  id          Int            @id @default(autoincrement())
  postId      Int
  postTagId   Int

  // Relationships
  post        DiscussionPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postTag     PostTag        @relation(fields: [postTagId], references: [id], onDelete: Cascade)

  @@map("discussion_post_tag")
}




// Equipment Management
model Instrument {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  // Relationships
  events      Event[]

  @@map("instrument")
}

// Event Management
model Event {
  id               Int               @id @default(autoincrement())
  labId            Int
  memberId         Int
  instrumentId     Int?
  title            String
  description      String?
  status           String?
  startTime        DateTime
  endTime          DateTime
  updatedAt        DateTime          @updatedAt
  typeId           Int

  // Relations
  lab              Lab               @relation(fields: [labId], references: [id])
  assigner         LabMember         @relation(fields: [memberId], references: [id])
  instrument       Instrument?       @relation(fields: [instrumentId], references: [id])
  type             EventType?         @relation(fields: [typeId], references: [id])

  eventAssignments EventAssignment[]
  @@map("event")
}

model EventAssignment {
  id       Int       @id @default(autoincrement())
  eventId  Int
  memberId Int

  // Relations
  member   LabMember @relation(fields: [memberId], references: [id])
  event    Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_assignment")
}

model EventType {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  // Relationships
  events      Event[]

  @@map("event_type")
}


// Audit Logging System
model AuditLog {
  id          Int           @id @default(autoincrement())
  action      AuditAction
  entityType  String        @db.VarChar(255) 
  entityId    String        @db.VarChar(255) 
  userId      Int           
  labId       Int?          
  timestamp   DateTime      @default(now())
  oldValues   Json?         
  newValues   Json?         
  ipAddress   String?       @db.VarChar(45) 
  userAgent   String?       @db.VarChar(255) 

  // Relationships
  user        User          @relation(fields: [userId], references: [id])
  lab         Lab?          @relation(fields: [labId], references: [id])
  details     AuditDetail[]

  @@index([entityType, entityId])
  @@index([userId])
  @@index([timestamp])
  @@index([action])
  @@map("audit_log")
}

// Audit action enum
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  FAILED_LOGIN
  EXPORT
  IMPORT
  VIEW_SENSITIVE
}

// For storing field-level changes
model AuditDetail {
  id         Int     @id @default(autoincrement())
  auditLogId Int
  field      String  @db.VarChar(255) // Which field was changed
  oldValue   String? @db.Text // Previous value (as string)
  newValue   String? @db.Text // New value (as string)

  // Relationship
  auditLog   AuditLog @relation(fields: [auditLogId], references: [id], onDelete: Cascade)

  @@index([auditLogId])
  @@map("audit_detail")
}

model LabAttendance {
  id       Int       @id @default(autoincrement())
  memberId Int
  clockIn  DateTime
  clockOut DateTime?
  member   LabMember @relation(fields: [memberId], references: [id])

  @@index([memberId])
  @@map("lab_attendance")
}

// Inventory Logging System
model InventoryLog {
  id                Int                @id @default(autoincrement())
  labInventoryItemId Int?              // Made optional to preserve logs when items are deleted
  userId            Int                // Always present - who performed the action
  memberId          Int?               // Optional - null for non-member admin operations
  action            InventoryAction   
  source            InventorySource   
  previousValues    Json?             
  newValues         Json?             
  quantityChanged   Int?              
  reason            String?           
  createdAt         DateTime          @default(now())
  
  // Relationships
  labInventoryItem  LabInventoryItem?  @relation(fields: [labInventoryItemId], references: [id], onDelete: SetNull)
  user              User              @relation(fields: [userId], references: [id])
  member            LabMember?        @relation(fields: [memberId], references: [id])
  
  @@index([labInventoryItemId])
  @@index([userId])
  @@index([memberId])
  @@index([createdAt])
  @@map("inventory_log")
}

// Inventory action enum
enum InventoryAction {
  STOCK_ADD        // Adding stock
  STOCK_REMOVE     // Removing/using stock  
  STOCK_UPDATE     // Manual stock correction
  LOCATION_CHANGE  // Moving item location
  MIN_STOCK_UPDATE // Changing minimum stock threshold
  ITEM_ADDED       // New item added to lab
  ITEM_REMOVED     // Item removed from lab
  ITEM_UPDATE      // Updating item properties
}

// Inventory source enum
enum InventorySource {
  ADMIN_PANEL      // Changes made via admin/manage-lab inventory tab
  LAB_INTERFACE    // Changes made from within lab context
  API_DIRECT       // Direct API calls
  BULK_IMPORT      // Bulk operations
}
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  timestamp DateTime @default(now())
  read      Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
